cmake_minimum_required (
        VERSION
                3.23
)

project (
        ocppi
        LANGUAGES
                CXX
        VERSION
                0.1.0
)

option (
        OCPPI_BUILD_EXAMPLES "Build examples of ocppi or not"
        ${PROJECT_IS_TOP_LEVEL}
)

option (
        OCPPI_ENABLE_TESTING "Enable test of ocppi or not"
        ${PROJECT_IS_TOP_LEVEL}
)

include (./cmake/GetSemverFromGit.cmake)

set (OCPPI_SEMVER ${PROJECT_VERSION})
ocppi_get_semver_from_git (OCPPI_SEMVER)

# generated by `find -type f -name '*.in'`
set (IN_FILES ./include/ocppi/version.hpp.in)

# generated by `find include -type f`
set (
        HEADERS
        include/ocppi/runtime/config/types/Anet.hpp
        include/ocppi/runtime/config/types/BlockIO.hpp
        include/ocppi/runtime/config/types/BlockIODeviceThrottle.hpp
        include/ocppi/runtime/config/types/BlockIODeviceWeight.hpp
        include/ocppi/runtime/config/types/BoottimeClass.hpp
        include/ocppi/runtime/config/types/Capabilities.hpp
        include/ocppi/runtime/config/types/CappedCPU.hpp
        include/ocppi/runtime/config/types/CappedMemory.hpp
        include/ocppi/runtime/config/types/Class.hpp
        include/ocppi/runtime/config/types/Config.hpp
        include/ocppi/runtime/config/types/ConsoleSize.hpp
        include/ocppi/runtime/config/types/DeviceCgroup.hpp
        include/ocppi/runtime/config/types/FluffyCPU.hpp
        include/ocppi/runtime/config/types/FluffyMemory.hpp
        include/ocppi/runtime/config/types/Generators.hpp
        include/ocppi/runtime/config/types/Hook.hpp
        include/ocppi/runtime/config/types/Hooks.hpp
        include/ocppi/runtime/config/types/HugepageLimit.hpp
        include/ocppi/runtime/config/types/Hyperv.hpp
        include/ocppi/runtime/config/types/Hypervisor.hpp
        include/ocppi/runtime/config/types/IdMapping.hpp
        include/ocppi/runtime/config/types/IdType.hpp
        include/ocppi/runtime/config/types/Image.hpp
        include/ocppi/runtime/config/types/IntelRdt.hpp
        include/ocppi/runtime/config/types/IoPriority.hpp
        include/ocppi/runtime/config/types/Kernel.hpp
        include/ocppi/runtime/config/types/Linux.hpp
        include/ocppi/runtime/config/types/LinuxDevice.hpp
        include/ocppi/runtime/config/types/LinuxResources.hpp
        include/ocppi/runtime/config/types/Mount.hpp
        include/ocppi/runtime/config/types/NamespaceReference.hpp
        include/ocppi/runtime/config/types/NamespaceType.hpp
        include/ocppi/runtime/config/types/NetworkInterfacePriority.hpp
        include/ocppi/runtime/config/types/Personality.hpp
        include/ocppi/runtime/config/types/PersonalityDomain.hpp
        include/ocppi/runtime/config/types/Pids.hpp
        include/ocppi/runtime/config/types/Process.hpp
        include/ocppi/runtime/config/types/PurpleCPU.hpp
        include/ocppi/runtime/config/types/PurpleMemory.hpp
        include/ocppi/runtime/config/types/Rdma.hpp
        include/ocppi/runtime/config/types/ResourcesNetwork.hpp
        include/ocppi/runtime/config/types/Rlimit.hpp
        include/ocppi/runtime/config/types/Root.hpp
        include/ocppi/runtime/config/types/RootImageFormat.hpp
        include/ocppi/runtime/config/types/RootfsPropagation.hpp
        include/ocppi/runtime/config/types/Scheduler.hpp
        include/ocppi/runtime/config/types/SchedulerFlag.hpp
        include/ocppi/runtime/config/types/SchedulerPolicy.hpp
        include/ocppi/runtime/config/types/Seccomp.hpp
        include/ocppi/runtime/config/types/SeccompAction.hpp
        include/ocppi/runtime/config/types/SeccompArch.hpp
        include/ocppi/runtime/config/types/SeccompFlag.hpp
        include/ocppi/runtime/config/types/SeccompOperators.hpp
        include/ocppi/runtime/config/types/Solaris.hpp
        include/ocppi/runtime/config/types/Storage.hpp
        include/ocppi/runtime/config/types/Syscall.hpp
        include/ocppi/runtime/config/types/SyscallArg.hpp
        include/ocppi/runtime/config/types/TimeOffsets.hpp
        include/ocppi/runtime/config/types/User.hpp
        include/ocppi/runtime/config/types/Vm.hpp
        include/ocppi/runtime/config/types/Windows.hpp
        include/ocppi/runtime/config/types/WindowsDevice.hpp
        include/ocppi/runtime/config/types/WindowsNetwork.hpp
        include/ocppi/runtime/config/types/WindowsResources.hpp
        include/ocppi/runtime/config/types/Zos.hpp
        include/ocppi/runtime/config/types/ZosDevice.hpp
        include/ocppi/runtime/config/types/helper.hpp
        include/ocppi/runtime/features/types/Apparmor.hpp
        include/ocppi/runtime/features/types/Cgroup.hpp
        include/ocppi/runtime/features/types/Features.hpp
        include/ocppi/runtime/features/types/Generators.hpp
        include/ocppi/runtime/features/types/IntelRdt.hpp
        include/ocppi/runtime/features/types/Linux.hpp
        include/ocppi/runtime/features/types/NamespaceType.hpp
        include/ocppi/runtime/features/types/Seccomp.hpp
        include/ocppi/runtime/features/types/SeccompAction.hpp
        include/ocppi/runtime/features/types/SeccompArch.hpp
        include/ocppi/runtime/features/types/SeccompFlag.hpp
        include/ocppi/runtime/features/types/SeccompOperators.hpp
        include/ocppi/runtime/features/types/Selinux.hpp
        include/ocppi/runtime/features/types/helper.hpp
        include/ocppi/runtime/state/types/Generators.hpp
        include/ocppi/runtime/state/types/State.hpp
        include/ocppi/runtime/state/types/Status.hpp
        include/ocppi/runtime/state/types/helper.hpp
)

# generated by `find src -type f`, including private headers.
set (
        SOURCES
        src/ocppi/version.cpp
        src/ocppi/utils/semver/Semver.cpp
        src/ocppi/runtime/state/load.cpp
        src/ocppi/runtime/config/load.cpp
        src/ocppi/runtime/features/load.cpp
)

foreach(IN_FILE ${IN_FILES})
        string (
                REGEX
                REPLACE
                        "\.in$" "" OUT_FILE ${IN_FILE}
        )

        configure_file (${IN_FILE} ${OUT_FILE} @ONLY)

        if(OUT_FILE MATCHES "^include/.*\.hpp$")
                list (APPEND HEADERS ${OUT_FILE})
        elseif(OUT_FILE MATCHES "^src/.*\.(h|c)pp$")
                list (APPEND SOURCES ${OUT_FILE})
        else()
                # TODO: add other files later
        endif()
endforeach()

add_library (ocppi ${SOURCES})

target_sources (
        ocppi
        PUBLIC
                FILE_SET HEADERS BASE_DIRS include
                ${CMAKE_CURRENT_BINARY_DIR}/include FILES ${HEADERS}
)

target_compile_features (
        ocppi PUBLIC
                      cxx_std_17
)

if(OCPPI_BUILD_EXAMPLES)
        add_subdirectory (./examples)
endif()
