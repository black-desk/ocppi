// Thish file is generated by quicktype,
// check /tools/codegen for further information.
// DO NOT EDIT IT.

//  To parse this JSON data, first install
//
//      json.hpp  https://github.com/nlohmann/json
//
//  Then include this file, and then do
//
//     Schema.hpp data = nlohmann::json::parse(jsonString);
//
//  You can get std::wstring data back out using
//
//     std::wcout << wdump((nlohmann::json) Schema);

#pragma once

#include <optional>

#include <nlohmann/json.hpp>

#include "Definitions.hpp"
#include "Linux.hpp"
#include "SchemaProperties.hpp"
#include "Solaris.hpp"
#include "Vm.hpp"
#include "Windows.hpp"
#include "Zos.hpp"
#include "helper.hpp"

namespace ocppi
{
namespace runtime
{
namespace config
{
enum class FilePathType : int;
}
}
}

namespace ocppi
{
namespace runtime
{
namespace config
{
using nlohmann::json;

struct Schema {
        std::optional<Linux> linux;
        std::optional<std::wstring> description;
        std::optional<std::wstring> schema;
        std::optional<FilePathType> type;
        std::optional<SchemaProperties> properties;
        std::optional<std::vector<std::wstring>> required;
        std::optional<Solaris> solaris;
        std::optional<Vm> vm;
        std::optional<Windows> windows;
        std::optional<Zos> zos;
        std::optional<Definitions> definitions;
};
}
}
}

// stdout

//  To parse this JSON data, first install
//
//      json.hpp  https://github.com/nlohmann/json
//
//  Then include this file, and then do
//
//     stdout data = nlohmann::json::parse(jsonString);
//
//  You can get std::wstring data back out using
//
//     std::wcout << wdump((nlohmann::json) Schema);

#pragma once

#include <optional>

#include <nlohmann/json.hpp>

#include "AmbitiousProperties.hpp"
#include "Anet.hpp"
#include "AnetItems.hpp"
#include "Apparmor.hpp"
#include "ApparmorProperties.hpp"
#include "ArrayOfGIDsType.hpp"
#include "ArrayOfGiDs.hpp"
#include "ArrayOfStrings.hpp"
#include "BlockIO.hpp"
#include "BlockIODevice.hpp"
#include "BlockIODeviceProperties.hpp"
#include "BlockIODeviceThrottle.hpp"
#include "BlockIODeviceThrottleAllOf.hpp"
#include "BlockIODeviceWeight.hpp"
#include "BlockIODeviceWeightAllOf.hpp"
#include "BlockIOProperties.hpp"
#include "CapabilitiesProperties.hpp"
#include "CappedCPU.hpp"
#include "CappedCPUProperties.hpp"
#include "CappedMemory.hpp"
#include "CappedMemoryProperties.hpp"
#include "Cgroup.hpp"
#include "CgroupProperties.hpp"
#include "ConsoleSize.hpp"
#include "ConsoleSizeProperties.hpp"
#include "CunningProperties.hpp"
#include "Definitions.hpp"
#include "Device.hpp"
#include "DeviceCgroup.hpp"
#include "DeviceCgroupProperties.hpp"
#include "DeviceProperties.hpp"
#include "Env.hpp"
#include "FileMode.hpp"
#include "FilePath.hpp"
#include "FilePathType.hpp"
#include "FileType.hpp"
#include "FluffyCPU.hpp"
#include "FluffyCapabilities.hpp"
#include "FluffyMemory.hpp"
#include "FluffyNetwork.hpp"
#include "FluffyProperties.hpp"
#include "FluffyResources.hpp"
#include "FriskyProperties.hpp"
#include "HilariousProperties.hpp"
#include "Hook.hpp"
#include "HookProperties.hpp"
#include "Hooks.hpp"
#include "HooksProperties.hpp"
#include "HugepageLimits.hpp"
#include "HugepageLimitsItems.hpp"
#include "Hyperv.hpp"
#include "HypervProperties.hpp"
#include "Hypervisor.hpp"
#include "HypervisorProperties.hpp"
#include "IdMapping.hpp"
#include "IdMappingProperties.hpp"
#include "Image.hpp"
#include "ImageProperties.hpp"
#include "IndecentProperties.hpp"
#include "IndigoProperties.hpp"
#include "IntelRdt.hpp"
#include "IntelRdtProperties.hpp"
#include "IoPriority.hpp"
#include "IoPriorityProperties.hpp"
#include "Kernel.hpp"
#include "KernelProperties.hpp"
#include "LayerFolders.hpp"
#include "Linux.hpp"
#include "LinuxProperties.hpp"
#include "MagentaProperties.hpp"
#include "Major.hpp"
#include "MapStringString.hpp"
#include "MemBWSchemaClass.hpp"
#include "MischievousProperties.hpp"
#include "Mount.hpp"
#include "MountProperties.hpp"
#include "Names.hpp"
#include "NamespaceReference.hpp"
#include "NamespaceReferenceProperties.hpp"
#include "NamespaceType.hpp"
#include "Namespaces.hpp"
#include "NamespacesItems.hpp"
#include "NetworkInterfacePriority.hpp"
#include "NetworkInterfacePriorityProperties.hpp"
#include "OciVersion.hpp"
#include "PatternProperties.hpp"
#include "Personality.hpp"
#include "PersonalityClass.hpp"
#include "PersonalityProperties.hpp"
#include "Pid.hpp"
#include "Pids.hpp"
#include "PidsProperties.hpp"
#include "Process.hpp"
#include "ProcessProperties.hpp"
#include "PurpleCPU.hpp"
#include "PurpleCapabilities.hpp"
#include "PurpleMemory.hpp"
#include "PurpleNetwork.hpp"
#include "PurpleProperties.hpp"
#include "PurpleResources.hpp"
#include "Rdma.hpp"
#include "RdmaClass.hpp"
#include "RdmaProperties.hpp"
#include "Rlimits.hpp"
#include "RlimitsItems.hpp"
#include "Root.hpp"
#include "RootProperties.hpp"
#include "Scheduler.hpp"
#include "SchedulerProperties.hpp"
#include "Schema.hpp"
#include "SchemaProperties.hpp"
#include "Seccomp.hpp"
#include "SeccompProperties.hpp"
#include "Solaris.hpp"
#include "SolarisProperties.hpp"
#include "StickyProperties.hpp"
#include "Storage.hpp"
#include "StorageProperties.hpp"
#include "Syscall.hpp"
#include "SyscallArg.hpp"
#include "SyscallArgProperties.hpp"
#include "SyscallProperties.hpp"
#include "TentacledProperties.hpp"
#include "TimeOffsets.hpp"
#include "TimeOffsetsClass.hpp"
#include "TimeOffsetsProperties.hpp"
#include "TimeOffsetsPropertiesClass.hpp"
#include "User.hpp"
#include "UserProperties.hpp"
#include "Vm.hpp"
#include "VmProperties.hpp"
#include "Windows.hpp"
#include "WindowsProperties.hpp"
#include "Zos.hpp"
#include "ZosProperties.hpp"
#include "helper.hpp"
namespace ocppi
{
namespace runtime
{
namespace config
{
}
}
}
