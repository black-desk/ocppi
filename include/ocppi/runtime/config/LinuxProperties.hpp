// Thish file is generated by quicktype,
// check /tools/codegen for further information.
// DO NOT EDIT IT.

//  To parse this JSON data, first install
//
//      json.hpp  https://github.com/nlohmann/json
//
//  Then include this file, and then do
//
//     LinuxProperties.hpp data = nlohmann::json::parse(jsonString);
//
//  You can get std::wstring data back out using
//
//     std::wcout << wdump((nlohmann::json) Schema);

#pragma once

#include <optional>

#include <nlohmann/json.hpp>

#include "Apparmor.hpp"
#include "ArrayOfGiDs.hpp"
#include "Cgroup.hpp"
#include "Env.hpp"
#include "FilePath.hpp"
#include "IntelRdt.hpp"
#include "Namespaces.hpp"
#include "PersonalityClass.hpp"
#include "PurpleCapabilities.hpp"
#include "PurpleResources.hpp"
#include "Seccomp.hpp"
#include "TimeOffsetsClass.hpp"
#include "helper.hpp"

namespace ocppi
{
namespace runtime
{
namespace config
{
using nlohmann::json;

struct LinuxProperties {
        std::optional<ArrayOfGiDs> devices;
        std::optional<ArrayOfGiDs> uidMappings;
        std::optional<ArrayOfGiDs> gidMappings;
        Namespaces namespaces;
        std::optional<PurpleResources> resources;
        std::optional<FilePath> cgroupsPath;
        std::optional<Env> rootfsPropagation;
        Seccomp seccomp;
        std::optional<Env> sysctl;
        std::optional<Env> maskedPaths;
        std::optional<Env> readonlyPaths;
        std::optional<FilePath> mountLabel;
        IntelRdt intelRdt;
        std::optional<PersonalityClass> personality;
        std::optional<TimeOffsetsClass> timeOffsets;
        std::optional<PurpleCapabilities> capabilities;
        std::optional<Cgroup> cgroup;
        std::optional<Apparmor> apparmor;
        std::optional<Apparmor> selinux;
};
}
}
}
